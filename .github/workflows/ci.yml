name: Build, Push, and Deploy Backend

on:
  push:
    branches:
      - main
  workflow_dispatch: 

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [backend_rds, backend_redis]
      fail-fast: false

    permissions:
      id-token: write  
      contents: read  

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Check for changes in the current service
      - name: Check for changes in ${{ matrix.service }}
        id: check_backend_changes
        run: |
          git diff --name-only HEAD~1 HEAD | grep -q "^${{ matrix.service }}/" && echo "build_service=true" >> $GITHUB_ENV || echo "build_service=false" >> $GITHUB_ENV

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        if: env.build_service == 'true'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"

      # Step 4: Build and Push Docker Images
      - name: Build and Push ${{ matrix.service }} Image
        if: env.build_service == 'true'
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}_image:latest -f ${{ matrix.service }}/Dockerfile ./${{ matrix.service }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}_image:latest

      # Step 5: Deploy to EC2
      - name: Deploy ${{ matrix.service }} to EC2
        if: env.build_service == 'true'
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          echo "${PRIVATE_KEY}" > ec2_key.pem
          chmod 600 ec2_key.pem
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${EC2_USER}@${EC2_HOST} << 'EOF'
            docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}_image:latest
            docker stop ${{ matrix.service }} || true
            docker rm ${{ matrix.service }} || true
            docker run -d --name ${{ matrix.service }} -p 8000:8000 ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}_image:latest
          EOF
          rm ec2_key.pem
